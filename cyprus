#!/usr/bin/env python

# This file is part of Cyprus.
#
# Cyprus is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Cyprus is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Cyprus.  If not, see <http://www.gnu.org/licenses/>.

import sys
import copy
import os
import optparse

from cypruslib import movie
from cypruslib import config

# Number of other results to give if the first found mov is incorrect
NUM_OTHER_RESULTS = 5

"""
Main class which handles user input and sanitization
"""
class Main:
    def __init__(self):
        self.config = config.Config()
        self.config.check_config()
        self.parser = None
        self.args = None
        self.options = None
    
    def read_input(self):
        self.parser = optparse.OptionParser()
        self.parser.add_option('-v', '--verbose', dest='verbose',
                               action='store_true', default=False,
                               help='Enable verbose output')
        (self.options, self.args) = self.parser.parse_args()
        print self.options
        for i in range(0, len(self.args)):
            if not os.path.exists(self.args[i]):
                print 'File %s does not exist' % self.args[i]
            else:
                mov = movie.Movie(self.args[i])
                print 'Looking up file %s...' % self.args[i]
                mov.lookup()
                mov.select_result(0)
                self.__check_movie(mov)
                
    def __check_movie(self, mov):
        if mov.results == []:
            print 'No movies found in search.'
            self.__manual_search(mov)
            return

        if self.options.verbose == True:
            summary = mov.summarize()
            print summary + '\n'
        else:
            print mov.title
        correct = raw_input('Is this movie correct? Y/N: ')
        if correct == 'Y' or correct == 'y':
            print 'Movie is correct. Copying to library...'
            mov.move_to_library()
        else:
            self.__extended_search(mov)

    def __extended_search(self, mov):
        print '\nPrinting other results: '
        if len(mov.results) >= NUM_OTHER_RESULTS:
            for i in range(0, NUM_OTHER_RESULTS):
                print i + 1, mov.results[i]
        else:
            for i in range(0, len(mov.results)):
                print i + 1, mov.results[i]
                
        while True:
            other_mov = raw_input('Correct mov (or N for none): ')
            
            if other_mov == 'n' or other_mov == 'N':
                self.__manual_search(mov)
                return
            try:
                other_mov = int(other_mov)
            except ValueError, e:
                print 'Whoops, that value seems to not be valid.'
                print e

            if other_mov > 0 and other_mov <= NUM_OTHER_RESULTS:
                print '\nPicking other mov.'
                mov.select_result(other_mov - 1)
                self.__check_movie(mov)
                return

    def __manual_search(self, mov):
        newquery = raw_input('Please provide new search term: ')
        print 'Searching for new mov %s: \n' % newquery
        mov.query = newquery
        mov.lookup()
        mov.select_result(0)
        self.__check_movie(mov)

if __name__ == '__main__':
    main = Main()
    main.read_input()
